 **Домашня контрольна робота**
 ==========================
 
 **Завдання:**
 ---------
 
 **Написати програму, що:**
	- Реалізує бітовий калькулятор з операціями SET BIT, UNSET BIT, FLIP BIT. 
	Програма приймає аргументи у вигляді двійкового запису (0b...), десяткового (...), шістнадцяткового (0x...)
	- Приймає аргументи командного рядка. Для парсингу використати **Argp**.
	- Прапорець *--verbose* (*-v*)змушує програму виводити виконувані дії 
	  детально. Інакше вважається, що її висновок використовуватиметься 
	  іншою прогамою.
    - Збирається за допомогою **Make**. **Makefile** містить додаткові цілі
	  *build* і *clean*, де *build* є метою-посиланням на основну, 
	  а *clean* – PHONY-метою, що очищає всі артефакти складання.
    - Виводить результат у **stdout**, а помилки – у **stderr**.
    - Містить частину службових функцій, винесених в окремий модуль    
	  **utils** **utils.c** та **utils.h**).
    - Повертає **exit code 0** у разі успішного завершення, відповідний код 
	  помилки інакше. Для визначення помилок використати **enum**.
    - Використовує об'єктний стиль коду для внутрішніх конструкцій, що 
	  реалізують основний функціонал.
	
 **Хід роботи та принцип роботи програми:**
 --------------------------------------
	
 **Етапи розробки**
	- Створений makefile
	- Створені файли вихідних кодів **main.c**, **utils.c**, **utils.h**
	- Створена програма, що реалізує калькулятор
	
 **Використовуються такі параметри командного рядка:**
	*--verbose* - детальний вивід
	*--set* - встановити біт у 1
	*--unset* - встановити біт у 0
	*--flip* - інвертувати біт
	
 **Принцип роботи**
	Спочатку створюються об'єкт типу структура для зберігання аргументів командного рядка.
	Ініціалізуються змінні для зберігання коду типу числа, коду операції та числа, що переведене зі строки.
	За замовчуванням **verbose** дорівнює нулю. 
	Відбувається парсинг аргументів. При парсингу перевіряються
	помилки **TOO_MANY_ARGUMENTS** та **NOT_ENOUGH_ARGUMENTS**. 
	Якщо виникає одна з перелічених помилок, програма завершується
	з відповідним кодом помилки.
	Далі виконуються такі етапи:
	- визначається тип операції
	- визначається форма числа
	- за допомогою switch(vartype) строка переводиться у десяткове число через певну функцію
	- за допомогою switch(operation) виконується потрібна операція через певну функцію
	Якщо программа пройшла всі етапи, вважається що **EXECUTION_SUCCESSFUL**
	і програма завершується з кодом 0.
	
**Лабораторна робота 2**
 ==========================
 
 
**Завдання**
 ==========================
 
Написати модуль який приймає два аргументи: cnt, delay.

При ініціалізації (module_init) модуль виводить значення jiffies, створює масив розміром cnt, запускає tasklet який виводить значення jiffies та запускає hrtimer із затримкою delay мс, що записує cnt значень jiffies у масив. При розвантаженні модуль знову виводить значення jiffies та друкує отриманий масив.

**Xiд роботи**

*tasket*
Для того щоб створити tasklet необхідно:

створити callback-функцію обробник; використати макрос DECLARE_TASKLET АБО

ініціалізувати tasklet вручну за допомогою об'явлення структури struct tasklet_struct <name> та функції tasklet_init; Далі можемо "запланувати" виконання tasklet'у за допомогою tasklet_schedule.

*hrtimer*
Для створення hrtimer'у необхідно:

оголосити структуру `struct hrtimer <name>` ; оголосити функцію-обробник типу enum hrtimer_restart <function_name>(struct hrtimer *timer); ініціалізувати оголошену раніше структуру за допомогою hrtimer_init; Наступним кроком можемо запустити таймер функцією hrtimer_start і перезапускати за допомогою, наприклад, hrtimer_forward_now, передаючи у якості другого параметру час спрацювання у форматі ktime_t. Для зручності можна скористатися, наприклад, функцією ms_to_ktime.

*Allocating Memory*
Виділення пам'яті відбувається за допомогою kmalloc()


Флаг `GFP_KERNEL` дозволено працювати як фоновому, так і прямому відновлення.

Обробник переривання повинен швидко відпрацьовувати. В перериванні велика затримка може призвести до падіння, тому потрібно використовувати `GFP_KERNEL|GFP_ATOMIC`.

Флаг `GFP_KERNEL|GFP_ATOMIC` - виділення без режиму сну.


**Результат**

Результат роботи модуля, без уведеного аргумента:

/ # insmod /src/mod_lab2.ko
[   98.474398] Init jiffies = 4294765552
[   98.475526] Tasklet jiffies = 4294765553
/ # rmmod mod_lab2
[  105.119380] Exit jiffies = 4294772197
[  105.120774] jiff_arr[0] = 4294765555
/ #
За замовчуванням, кількість комірок масива рівна 1, а затримка 1 мілісекунда.

Результат роботи модуля з уведеним cnt = 0:

/ # insmod /src/mod_lab2.ko cnt=0
[  205.172371] Init jiffies = 4294872250
[  205.173498] Error: invalid value of cnt!
[  205.174361] Tasklet jiffies = 4294872252
/ # rmmod mod_lab2
[  209.895415] Exit jiffies = 4294876973
/ #
Результат роботи модуля з уведеним delay = 0:

/ # insmod /src/mod_lab2.ko cnt=10 delay=0
[ 1004.230265] Init jiffies = 4295671308
[ 1004.231238] Tasklet jiffies = 4295671309
/ # rmmod mod_lab2
[ 1005.639344] Exit jiffies = 4295672717
[ 1005.640784] jiff_arr[0] = 4295671310
[ 1005.641733] jiff_arr[1] = 4295671310
[ 1005.642652] jiff_arr[2] = 4295671310
[ 1005.644123] jiff_arr[3] = 4295671311
[ 1005.644938] jiff_arr[4] = 4295671311
[ 1005.645746] jiff_arr[5] = 4295671311
[ 1005.646544] jiff_arr[6] = 4295671317
[ 1005.647295] jiff_arr[7] = 4295671317
[ 1005.647533] jiff_arr[8] = 4295671317
[ 1005.648842] jiff_arr[9] = 4295671318
/ #
Результат роботи модуля при його вивантаженні під час заповнення масиву:

/ # insmod /src/mod_lab2.ko cnt=10 delay=1000
[  294.908266] Init jiffies = 4294961986
[  294.909187] Tasklet jiffies = 4294961987
/ # rmmod mod_lab2
[  299.382107] Exit jiffies = 4294966460
[  299.383013] array filling stoped!
[  299.383049] jiff_arr[0] = 4294961992
[  299.384549] jiff_arr[1] = 4294962989
[  299.385264] jiff_arr[2] = 4294963989
[  299.386042] jiff_arr[3] = 4294964989
[  299.391209] jiff_arr[4] = 4294965989
/ #
Результат роботи модуля при вірно заданих параметрах та повному заповненні масива:

/ # insmod /src/mod_lab2.ko cnt=10 delay=100
[  360.044600] Init jiffies = 4295027123
[  360.045383] Tasklet jiffies = 4295027123
/ # rmmod mod_lab2
[  364.408531] Exit jiffies = 4295031486
[  364.411480] jiff_arr[0] = 4295027125
[  364.413612] jiff_arr[1] = 4295027225
[  364.414383] jiff_arr[2] = 4295027325
[  364.415100] jiff_arr[3] = 4295027425
[  364.415805] jiff_arr[4] = 4295027525
[  364.416426] jiff_arr[5] = 4295027625
[  364.417420] jiff_arr[6] = 4295027725
[  364.420438] jiff_arr[7] = 4295027825
[  364.421140] jiff_arr[8] = 4295027925
[  364.421847] jiff_arr[9] = 4295028025
/ #



**Висновок**

Отже в даній роботі я розібралась з tasket, hrtimer і правильним виділенням пам'яті. Реалізувала модуль який відповідає вимогам завданню.Різниця значень jiffies відрізняється на 0, якщо ядро не навантажено і може виконати тасклет не очікуючи наступного такту. Різниця значень jiffies відрізняється на 1, якщо ядро авантажено, в такому разі ядро вже буде очікувати наступний такт. Різниця значень jiffies відрізняється на 2, якщо ядро навантажене і перед цим бло перемикання контексту, в такому разі scrdule виконається при наступному такті, а виконання тасклету ще на наступному такті, загалом виходить два такти.
У даній роботі було використано прапор GFP_KERNEL при виділенни пам'яті, оскільки, виділення відбувається не у перериванні і ядро може призупинити поточний процес, очикуючи поки буде виділено вільну пам'ять.
Різниця jiffies між двома запусками таймера рівна затримці, заданій у мілісекундах, оскільки, частота тактів системного таймера рівна 1000 Гц, що відповідає періоду в 1 мс.
При delay = 0 значення jiffies у всіх комірках масива будуть однаковими, оскільки, таймер буде миттєво перезавантажуватися і відповідно функція обробки буде викликатися миттєво, не очікуючи наступного такту системного таймера.








